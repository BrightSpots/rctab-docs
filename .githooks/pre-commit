#!/bin/bash

# Run mkdocs build
echo -e "\033[1;34mRunning mkdocs build...\033[0m"
poetry run mkdocs build

# Check for untracked files in /site
untracked_files=$(git ls-files --others --exclude-standard site)

# Check for unstaged changes in /site
unstaged_changes=$(git diff --name-only site)

if [ -n "$untracked_files" ] || [ -n "$unstaged_changes" ]; then
    echo -e "\033[1;31mDetected changes in the ./site directory:\033[0m"
    echo -e "\033[1;33mNote: ./site is tracked by git because it is served by our build process.\033[0m"
    echo -e "\033[1;33mEnsure all necessary changes, including those in ./site, are staged before committing.\033[0m"

    if [ -n "$untracked_files" ]; then
        echo -e "\033[1;33mUntracked files:\033[0m"
        echo "$untracked_files"
    fi

    if [ -n "$unstaged_changes" ]; then
        echo -e "\033[1;33mUnstaged changes:\033[0m"
        echo "$unstaged_changes"
    fi

    # Prompt the user to continue with the commit
    read -r -p "Do you still want to commit? [y/N] " response < /dev/tty

    # Trim leading/trailing whitespace and convert to lowercase
    response=$(echo "$response" | xargs | tr '[:upper:]' '[:lower:]')

    # Check if the response is exactly 'y' or 'yes'
    if [[ "$response" == "y" || "$response" == "yes" ]]; then
        echo -e "\033[1;32mProceeding with the commit...\033[0m"
        exit 0
    else
        echo -e "\033[1;31mCommit aborted.\033[0m"
        exit 1
    fi
fi

echo -e "\033[1;32mNo changes detected in /site. Proceeding with the commit...\033[0m"
exit 0